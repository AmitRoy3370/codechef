import java.util.*;
import java.lang.*;
import java.io.*;

public class Main
{
    
    static Scanner in = new Scanner(System.in);
    
    static int testCases, n;
    
    static long a[];
    
    /*
    
    alternating sub array is the sub array of the array which two
    contigious element is in opposite sign.
    
    eg1:
    
    i   ii  iii iv
    1   2   3   4
    
    start from i
    
    1
    
    start from ii
    
    2
    
    start from iii
    
    3
    
    start from iv
    
    4
    
    so the wanted output is: 1  1   1   1
    
    eg2:
    
    i   ii  iii iv
    1   -5  1   -5
    
    start from i
    
    1   -5  1   -5
    
    start from ii
    
    -5  1   -5
    
    start from iii
    
    1   -5
    
    start iv
    
    -5
    
    so the builded array is 4   3   2   1
    
    eg3:
    
    i   ii  iii iv  v   vi    
    -5  -1  -1  2   -2  -3
    
    start from i
    
    -5
    
    start from ii
    
    -1
    
    start from iii
    
    -1  2   -2
    
    start from iv
    
    2   -2
    
    start from v
    
    -2
    
    start from vi
    
    -3
    
    so the builded array is :- 1    1   3   2   1   1
    
    question from this solving example:
    
    * what is the complexity we can use at here to solve this?
    
      testcase range is 1 to 10. so this ignorable. but the range 
      of the n is 1 to 10^5. So, I think O(n) or maximum O(nlog(n))
      will be accepted.
    
    * what is the idea to solve this using 1d dp array?
    
      try with eg2
      
      1 -5  1   -5
      
      1  1  1    1 -> initially all bit are set to 1.
      
      1  2  3    4
      
      dp(i) = dp(i) - dp(i - 1)?
      
      try for the eg3:
      
      -5 -1 -1 2 -2 -3
      
      1   1  1 1  1  1  -> initial state.
      
      1   1  1 2  3  1  -> after build array for the 1 to n.
      
      1   1  1 -
      
      so this is stuck at here, so what happen if we start with
      the backward point?
      
      -5 -1 -1 2 -2 -3
       1  1  1 1  1  1 -> initial state
       1  1  3 2  1  1
       -  -  - -  -  - 
       
       this test case is accepted for this approach, now try eg2
       with this approach
       
       1    -5  1   -5
       1     1  1    1 -> initial state.
       4     3  2    1
       -     -  -    - 
       
       this case is also accepted for this approach
       
       now try for the eg1 with this approach
       
       1    2   3   4
       1    1   1   1 -> initial state.
       
    
    */
    
    static void solve() {
        
        long dp[] = new long[n];
        
        for(int i = 0; i < n; ++i) {
            
            dp[i] = 1L;
            
        }
        
        for (int i = n - 2; i >= 0; --i) {
            
            if (a[i] > 0L && a[i + 1] < 0L) {
                
                dp[i] += dp[i + 1];
                
            } else if (a[i] < 0L && a[i + 1] > 0L) {
                
                dp[i] += dp[i + 1];
                
            }
            
        }
        
        for (long i : dp) {
            
            System.out.print(i + " ");
            
        }
        
        System.out.println();
        
    }
    
	public static void main (String[] args) throws java.lang.Exception
	{
		
		testCases = in.nextInt();
		
		for(int t = 0; t < testCases; ++t) {
		    
		    n = in.nextInt();
		    
		    a = new long[n];
		    
		    for(int i = 0; i < n; ++i) {
		        
		        a[i] = in.nextLong();
		        
		    }
		    
		    solve();
		    
		}
		
	}
}
