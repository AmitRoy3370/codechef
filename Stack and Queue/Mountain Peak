import java.util.*;

public class Main {
    
    static class Element implements Comparable<Element> {
        
        long element;
        
        public Element(long element) {
            
            this.element = element;
            
        }
        
        public int compareTo(Element element) {
            
            if(this.element > element.element) {
                
                return -1;
                
            } else if(this.element < element.element) {
                
                return 1;
                
            }
            
            return 0;
            
        }
        
    }

    public static long[] nextHigherPeak(int[] a) {
        // Write your code here
        
        int n = a.length;
        
        long b[] = new long[n];
        
        ArrayList1<Integer> list = new ArrayList1<>();
        
        for(int i = 0; i < n; ++i) {
            
            b[i] = -1L;
            
        }
        
        for(int i = 0; i < n; ++i) {
            
            while(!list.isEmpty() && a[i] > a[list.get(0)]) {
                
                int index = list.get(0);
                list.popFront();
                
                b[index] = a[i];
                
            }
            
            list.inserFirst(i);
            
        }
        
        StringBuilder sb = new StringBuilder();
        
        for(int i = 0; i < n; ++i) {
            
            sb.append(b[i]).append(" ");
            
        }
       
       return b;
       
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] heights = new int[n];

        for (int i = 0; i < n; ++i) {
            heights[i] = sc.nextInt();
        }

        long[] result = nextHigherPeak(heights);

        for (long height : result) {
            System.out.print(height + " ");
        }
        System.out.println();
    }
    
    static class Node<T> {
 
        T data;
 
        Node<T> next;
 
        public Node() {
 
            this.next = null;
 
        }
 
        public Node(T data) {
 
            this.data = data;
 
            this.next = null;
 
        }
 
        public T getData() {
            return data;
        }
 
        public void setData(T data) {
            this.data = data;
        }
 
        public Node<T> getNext() {
            return next;
        }
 
        public void setNext(Node<T> next) {
            this.next = next;
        }
 
        @Override
        public String toString() {
 
            return this.getData().toString() + "  ";
 
        }
 
    }
 
    static class ArrayList1<T> {
 
        Node<T> head, tail;
 
        int len;
 
        public ArrayList1() {
 
            this.head = null;
 
            this.tail = null;
 
            this.len = 0;
 
        }
 
        int size() {
 
            return len;
 
        }
 
        boolean isEmpty() {
 
            return len == 0 || head == null || tail == null;
 
        }
 
        int indexOf(T data) {
 
            if (isEmpty()) {
 
                throw new ArrayIndexOutOfBoundsException();
 
            }
 
            Node<T> temp = head;
 
            int index = -1, i = 0;
 
            while (temp != null) {
 
                if (temp.getData() == data) {
 
                    index = i;
 
                }
 
                i++;
 
                temp = temp.getNext();
 
            }
 
            return index;
 
        }
 
        void add(T data) {
 
            Node<T> newNode = new Node<>(data);
 
            if (isEmpty()) {
 
                head = newNode;
 
                tail = newNode;
 
                len++;
 
            } else {
 
                tail.setNext(newNode);
 
                tail = newNode;
 
                len++;
 
            }
 
        }
 
        void see() {
 
            if (isEmpty()) {
 
                throw new ArrayIndexOutOfBoundsException();
 
            }
 
            Node<T> temp = head;
 
            while (temp != null) {
 
                System.out.print(temp.getData().toString() + " ");
                //out.flush();
 
                temp = temp.getNext();
 
            }
 
            System.out.println();
            //out.flush();
 
        }
 
        void inserFirst(T data) {
 
            Node<T> newNode = new Node<>(data);
 
            Node<T> temp = head;
 
            if (isEmpty()) {
 
                head = newNode;
                tail = newNode;
 
                len++;
 
            } else {
 
                newNode.setNext(temp);
 
                head = newNode;
 
                len++;
 
            }
 
        }
 
        T get(int index) {
 
            if (isEmpty() || index >= len) {
 
                throw new ArrayIndexOutOfBoundsException();
 
            }
 
            if (index == 0) {
 
                return head.getData();
 
            }
 
            Node<T> temp = head;
 
            int i = 0;
 
            T data = null;
 
            while (temp != null) {
 
                if (i == index) {
 
                    data = temp.getData();
 
                }
 
                i++;
 
                temp = temp.getNext();
 
            }
 
            return data;
 
        }
 
        void addAt(T data, int index) {
 
            if (index >= len) {
 
                throw new ArrayIndexOutOfBoundsException();
 
            }
 
            Node<T> newNode = new Node<>(data);
 
            int i = 0;
 
            Node<T> temp = head;
 
            while (temp.next != null) {
 
                if (i == index) {
 
                    newNode.setNext(temp.next);
 
                    temp.next = newNode;
 
                }
 
                i++;
 
                temp = temp.getNext();
 
            }
 
            //    temp.setNext(temp);
            len++;
 
        }
 
        void popFront() {
 
            if (isEmpty()) {
 
                //return;
                throw new ArrayIndexOutOfBoundsException();
 
            }
 
            if (head == tail) {
 
                head = null;
                tail = null;
 
            } else {
 
                head = head.getNext();
 
            }
 
            len--;
 
        }
 
        void removeAt(int index) {
 
            if (index >= len) {
 
                throw new ArrayIndexOutOfBoundsException();
 
            }
 
            if (index == 0) {
 
                this.popFront();
 
                return;
 
            }
 
            Node<T> temp = head;
 
            int i = 0;
 
            Node<T> n = new Node<>();
 
            while (temp != null) {
 
                if (i == index) {
 
                    n.next = temp.next;
 
                    temp.next = n;
 
                    break;
 
                }
 
                i++;
 
                n = temp;
 
                temp = temp.getNext();
 
            }
 
            tail = n;
 
            --len;
 
        }
 
        void clearAll() {
 
            this.head = null;
            this.tail = null;
 
        }
 
    }
    
}
